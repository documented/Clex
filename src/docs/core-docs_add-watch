###add-watch###

> *clojure.core/add-watch*
> 
>     :::clojure
>     ([reference key fn])
> 
>   Experimental.
>   Adds a watch function to an agent/atom/var/ref reference. The watch
>   fn must be a fn of 4 args: a key, the reference, its old-state, its
>   new-state. Whenever the reference's state might have been changed,
>   any registered watches will have their functions called. The watch fn
>   will be called synchronously, on the agent's thread if an agent,
>   before any pending sends if agent or ref. Note that an atom's or
>   ref's state may have changed again prior to the fn call, so use
>   old/new-state rather than derefing the reference. Note also that watch
>   fns may be called from multiple threads simultaneously. Var watchers
>   are triggered only by root binding changes, not thread-local
>   set!s. Keys must be unique per reference, and can be used to remove
>   the watch with remove-watch, but are otherwise considered opaque by
>   the watch mechanism.
