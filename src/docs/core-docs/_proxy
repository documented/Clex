###proxy###

> *clojure.core/proxy*
> 
>     :::clojure
>     ([class-and-interfaces args & fs])
> 
> Macro
>   class-and-interfaces - a vector of class names
> 
>   args - a (possibly empty) vector of arguments to the superclass
>   constructor.
> 
>   f => (name [params*] body) or
>   (name ([params*] body) ([params+] body) ...)
> 
>   Expands to code which creates a instance of a proxy class that
>   implements the named class/interface(s) by calling the supplied
>   fns. A single class, if provided, must be first. If not provided it
>   defaults to Object.
> 
>   The interfaces names must be valid interface types. If a method fn
>   is not provided for a class method, the superclass methd will be
>   called. If a method fn is not provided for an interface method, an
>   UnsupportedOperationException will be thrown should it be
>   called. Method fns are closures and can capture the environment in
>   which proxy is called. Each method fn takes an additional implicit
>   first arg, which is bound to 'this. Note that while method fns can
>   be provided to override protected methods, they have no other access
>   to protected members, nor to super, as these capabilities cannot be
>   proxied.
